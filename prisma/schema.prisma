// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  // username String @unique
  name          String
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  message       Message[]
  rooms         Room[]        @relation(fields: [roomIDs], references: [id])
  roomIDs       String[]      @db.ObjectId
  createdAt     DateTime      @default(now()) @db.Timestamp
  updatedAt     DateTime      @default(now()) @updatedAt @db.Timestamp
  messageLikes  MessageLike[]
}

model Room {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  memberIDs   String[]  @db.ObjectId
  members     User[]    @relation(fields: [memberIDs], references: [id])
  // adminIDs String[] @db.ObjectId
  // admins
  // moderatorIDs String[] @db.ObjectId
  // moderators
  // bannedIDs String[] @db.ObjectId
  // bannedMembers
  messages    Message[]
  description String?
  image       String?
  private     Boolean   @default(false)
  createdAt   DateTime  @default(now()) @db.Timestamp
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  source    String
  createdAt DateTime @default(now()) @db.Timestamp
  Message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String?  @db.ObjectId
}

model Message {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  room        Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId      String        @db.ObjectId
  deletedAt   DateTime?
  createdAt   DateTime      @default(now()) @db.Timestamp
  updatedAt   DateTime      @default(now()) @updatedAt @db.Timestamp
  attachments Attachment[]
  likes       MessageLike[]
  poll        Poll?
}

model MessageLike {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageId String  @db.ObjectId
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Poll {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  options   String[]
  scores    Int[]
  messageId String   @unique @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id])
}
